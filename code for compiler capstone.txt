#include <SFML/Graphics.hpp>
#include <vector>

bool leftOrRightCollision(const sf::CircleShape& ball, int windowWidth);
bool topCollision(const sf::CircleShape& ball);

const int windowWidth = 800;
const int windowHeight = 600;
const float paddleWidth = 100.f, paddleHeight = 20.f, ballRadius = 10.f, brickWidth = 60.f, brickHeight = 20.f;
const int rowCount = 4, columnCount = 11;

struct Brick {
    sf::RectangleShape shape;
    bool destroyed{false};

    Brick(float mX, float mY) {
        shape.setPosition(mX, mY);
        shape.setSize({brickWidth, brickHeight});
        shape.setFillColor(sf::Color::Yellow);
        shape.setOrigin(brickWidth / 2.f, brickHeight / 2.f);
    }
};

int main() {
    sf::RenderWindow window(sf::VideoMode(windowWidth, windowHeight), "Brick 'n Ball Game");
    window.setFramerateLimit(60);

    sf::RectangleShape paddle({paddleWidth, paddleHeight});
    paddle.setFillColor(sf::Color::Red);
    paddle.setPosition(windowWidth / 2.f, windowHeight - 50);
    paddle.setOrigin(paddleWidth / 2.f, paddleHeight / 2.f);

    sf::CircleShape ball(ballRadius);
    ball.setFillColor(sf::Color::Green);
    ball.setPosition(windowWidth / 2, windowHeight / 2);
    sf::Vector2f ballVelocity(-5.0f, -5.0f);

    std::vector<Brick> bricks;
    for (int iX = 0; iX < columnCount; ++iX) {
        for (int iY = 0; iY < rowCount; ++iY) {
            bricks.emplace_back((iX + 1) * (brickWidth + 3) + 22, (iY + 2) * (brickHeight + 3));
        }
    }

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && paddle.getPosition().x - paddleWidth / 2 > 0) {
            paddle.move(-6.f, 0.f);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && paddle.getPosition().x + paddleWidth / 2 < windowWidth) {
            paddle.move(6.f, 0.f);
        }

        ball.move(ballVelocity.x, ballVelocity.y);

        if (leftOrRightCollision(ball, windowWidth)) ballVelocity.x *= -1;
        if (topCollision(ball)) ballVelocity.y *= -1;

        if (ball.getGlobalBounds().intersects(paddle.getGlobalBounds())) ballVelocity.y *= -1;

        for (auto& brick : bricks) {
            if (!brick.destroyed && ball.getGlobalBounds().intersects(brick.shape.getGlobalBounds())) {
                brick.destroyed = true;
                ballVelocity.y *= -1;
                break; 
            }
        }

        window.clear();

        for (auto& brick : bricks)
            if (!brick.destroyed)
                window.draw(brick.shape);

        window.draw(paddle);
        window.draw(ball);
        window.display();
    }

    return 0;
}

bool leftOrRightCollision(const sf::CircleShape& ball, int windowWidth) {
    return ball.getPosition().x < ballRadius || ball.getPosition().x > windowWidth - ballRadius;
}

bool topCollision(const sf::CircleShape& ball) {
    return ball.getPosition().y < ballRadius;
}
